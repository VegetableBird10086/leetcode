ZZL:
执行用时：4 ms, 在所有 C++ 提交中击败了95.59%的用户
内存消耗：5.9 MB, 在所有 C++ 提交中击败了91.82%的用户
这个要比数字转罗马容易多了
思路：每个字符代表一个数 但是正负不同
例如：IV代表-1和5 VI代表1和5
可以发现 当前位置的字符小于下一个位置的字符时符号为- 否则为正
class Solution {
public:
    int romanChar2int(char c){
        switch(c){
            case 'I':return 1;
            case 'V':return 5;
            case 'X':return 10;
            case 'L':return 50;
            case 'C':return 100;
            case 'D':return 500;
            case 'M':return 1000;
        }
        return 0;
    }
    int romanToInt(string s) {
        int num[15],size=s.size();
        int ans=0;
        for(int i=0;i<size;i++)
            num[i]=romanChar2int(s[i]);
        for(int i=0;i<size-1;i++){
            if(num[i]<num[i+1])
                ans-=num[i];
            else
                ans+=num[i];
        }
        ans+=num[size-1];
        return ans;
    }
};
