ZZL:
执行用时：4 ms, 在所有 C++ 提交中击败了98.97%的用户
内存消耗：8.5 MB, 在所有 C++ 提交中击败了99.27%的用户
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        // 建立映射 从数组中值和其索引建立映射
        map<int,int> num2index;
        for(int i=0;i<nums.size();i++){
            // 如果target-nums[i]在数组中存在
            if(num2index[target-nums[i]])
                return {num2index[target-nums[i]]-1,i};
            // 数组索引从0开始 所以加一
            num2index[nums[i]] = i+1;
        }
        return {};
    }
};

LSY：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int i,j;
        //从第一个元素开始
        for(int i=0;i<nums.size();i++)
        {
            //从下一个元素开始判断
            for(int j=i+1;j<nums.size();j++)
            {
                //如果和相等
                if(nums[i]+nums[j]==target)
                {
                    //如果找到两个整数符合，返回两个整数
                    return{i,j};
                }
            }
        }
        //如果找不到，仍然返回两个整数
        return{i,j};

    }
};


LXT:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {//暴力枚举
        vector<int> result;//存放结果
        for(int i=0;i<nums.size();i++) {
            for(int j=i+1;j<nums.size();j++) {
                if(nums[i]+nums[j]==target) {
                    result.push_back(i);
                    result.push_back(j);
                    return result;
                }
            }
        }
        return result;
    }
};
